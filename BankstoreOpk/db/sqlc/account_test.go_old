// /*
// Pattern: <filename>_test.go
// */
// package db

// import (
// 	"BankstoreOpk/utils"
// 	"context"
// 	"log"
// 	"os"
// 	"testing"
// 	"time"

// 	"github.com/jackc/pgx/v5"
// 	"github.com/stretchr/testify/require"
// )

// const (
// 	dbDriver = "postgres"
// 	dbSource = "postgresql://postgres:P@ssw0rd@localhost:5432/bankdb?sslmode=disable"
// )

// var ctx = context.Background()

// var testQueries *Queries

// func TestMain(m *testing.M) {
// 	conn, err := pgx.Connect(ctx, dbSource)
// 	if err != nil {
// 		log.Fatal("can not connect to db", err)
// 	}
// 	defer conn.Close(ctx)

// 	testQueries = New(conn)

// 	os.Exit(m.Run())
// }

// func TestCreateAccount(t *testing.T) {
// 	account1 := CreateAccountRand(t)
// 	t.Cleanup(func() {testQueries.DeleteAccount(ctx, account1.ID)})
// }

// func TestCreateAccountParams(t *testing.T){
// 	arg := CreateAccountParams {
// 		Owner: "Petr",
// 		Balance: 100,
// 		Currency: "EUR",
// 	}
// 	account, err := testQueries.CreateAccount(ctx, arg)
// 	require.NoError(t, err)
// 	require.NotEmpty(t, account)
// }



// func CreateAccountRand(t *testing.T) Account {
// 	ra := utils.RandomAccount()
// 	arg := CreateAccountParams {
// 		Owner: ra.Owner,
// 		// Balance: utils.RandomInt(0, 1000),
// 		Balance: ra.Balance,
// 		Currency: Currency(ra.Currency),
// 	}
// 	account, err := testQueries.CreateAccount(ctx, arg)

// 	require.NoError(t, err)
// 	require.NotEmpty(t, account)
// 	require.Equal(t, arg.Owner, account.Owner)
// 	require.NotZero(t, account.ID)
// 	require.NotZero(t, account.CreatedAt)
// 	return account
// }

// func TestGetAccount(t *testing.T){
// 	account1 := CreateAccountRand(t)
// 	account2 , err := testQueries.GetAccount(ctx, account1.ID)
// 	require.NoError(t, err)
// 	require.NotEmpty(t, account2)
// 	require.Equal(t, account1.ID, account2.ID)
// 	require.WithinDuration(t, account1.CreatedAt.Time, account2.CreatedAt.Time, time.Second)
// }

// func TestDeleteAccount(t *testing.T){
// 	account1 := CreateAccountRand(t)
// 	err := testQueries.DeleteAccount(ctx, account1.ID)
// 	require.NoError(t, err)
// 	account2 , err := testQueries.GetAccount(ctx, account1.ID)
// 	require.Error(t, err)
// 	require.Empty(t, account2)
// 	require.EqualError(t, err, pgx.ErrNoRows.Error())
// }


// func TestListAccount(t *testing.T){
// 	for i := 0; i < 10; i++ {
// 		CreateAccountRand(t)
// 	}
// 	arg := ListAccountsParams {
// 		Limit: 5,
// 		Offset: 5,
// 	}
	
// 	accounts, err := testQueries.ListAccounts(ctx, arg)

// 	require.NoError(t, err)
// 	require.Len(t, accounts, 5)
// }

// // "go.coverMode": "count",
// // "go.coverOnSingleTest": true,
// // "go.coverOnSingleTestFile": true,
// // "go.coverShowCounts": true